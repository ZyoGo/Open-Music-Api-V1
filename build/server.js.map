{"version":3,"sources":["../src/server.js"],"names":["dotenv","config","init","songsService","SongsService","server","Hapi","Server","port","process","env","PORT","host","HOST","routes","cors","origin","ext","request","h","response","ClientError","newResponse","status","message","code","statusCode","continue","register","plugin","songs","options","service","validator","SongsValidator","start","console","log","info","uri"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEAA,gBAAOC,MAAP;;AAEA,MAAMC,IAAI,GAAG,YAAY;AACvB,QAAMC,YAAY,GAAG,IAAIC,qBAAJ,EAArB;;AAEA,QAAMC,MAAM,GAAGC,cAAKC,MAAL,CAAY;AACzBC,IAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,IADO;AAEzBC,IAAAA,IAAI,EAAEH,OAAO,CAACC,GAAR,CAAYG,IAFO;AAGzBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAE,CAAC,GAAD;AADJ;AADA;AAHiB,GAAZ,CAAf;;AAUAX,EAAAA,MAAM,CAACY,GAAP,CAAW,eAAX,EAA4B,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAC1C,UAAM;AAAEC,MAAAA;AAAF,QAAeF,OAArB;;AAEA,QAAIE,QAAQ,YAAYC,oBAAxB,EAAqC;AACnC,YAAMC,WAAW,GAAGH,CAAC,CAACC,QAAF,CAAW;AAC7BG,QAAAA,MAAM,EAAE,MADqB;AAG7BC,QAAAA,OAAO,EAAEJ,QAAQ,CAACI;AAHW,OAAX,CAApB;AAMAF,MAAAA,WAAW,CAACG,IAAZ,CAAiBL,QAAQ,CAACM,UAA1B;AAEA,aAAOJ,WAAP;AACD;;AAED,WAAOF,QAAQ,CAACO,QAAT,IAAqBP,QAA5B;AACD,GAhBD;AAkBA,QAAMf,MAAM,CAACuB,QAAP,CAAgB;AACpBC,IAAAA,MAAM,EAAEC,cADY;AAEpBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE7B,YADF;AAEP8B,MAAAA,SAAS,EAAEC;AAFJ;AAFW,GAAhB,CAAN;AAQA,QAAM7B,MAAM,CAAC8B,KAAP,EAAN,CAvCuB,CAyCvB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2BhC,MAAM,CAACiC,IAAP,CAAYC,GAAI,EAAxD;AACD,CA3CD;;AA6CArC,IAAI","sourcesContent":["import dotenv from 'dotenv';\nimport Hapi from '@hapi/hapi';\nimport songs from './api/songs';\nimport SongsService from './services/postgres/SongsService';\nimport SongsValidator from './validator/songs';\nimport ClientError from './exceptions/ClientError';\n\ndotenv.config();\n\nconst init = async () => {\n  const songsService = new SongsService();\n\n  const server = Hapi.Server({\n    port: process.env.PORT,\n    host: process.env.HOST,\n    routes: {\n      cors: {\n        origin: ['*'],\n      },\n    },\n  });\n\n  server.ext('onPreResponse', (request, h) => {\n    const { response } = request;\n\n    if (response instanceof ClientError) {\n      const newResponse = h.response({\n        status: 'fail',\n\n        message: response.message,\n      });\n\n      newResponse.code(response.statusCode);\n\n      return newResponse;\n    }\n\n    return response.continue || response;\n  });\n\n  await server.register({\n    plugin: songs,\n    options: {\n      service: songsService,\n      validator: SongsValidator,\n    },\n  });\n\n  await server.start();\n\n  // eslint-disable-next-line no-console\n  console.log(` ðŸš€ Server berjalan pada ${server.info.uri}`);\n};\n\ninit();\n"],"file":"server.js"}